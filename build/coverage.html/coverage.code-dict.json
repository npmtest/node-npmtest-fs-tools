{"/home/travis/build/npmtest/node-npmtest-fs-tools/test.js":"/* istanbul instrument in package npmtest_fs_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fs-tools/lib.npmtest_fs_tools.js":"/* istanbul instrument in package npmtest_fs_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_fs_tools = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_fs_tools = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-fs-tools/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-fs-tools && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_fs_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_fs_tools\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_fs_tools.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_fs_tools.rollup.js'] =\n            local.assetsDict['/assets.npmtest_fs_tools.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_fs_tools.__dirname + '/lib.npmtest_fs_tools.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fs-tools/node_modules/fs-tools/index.js":"'use strict';\n\nmodule.exports = require('./lib/fs-tools');\n","/home/travis/build/npmtest/node-npmtest-fs-tools/node_modules/fs-tools/lib/fs-tools.js":"/**\n *  FsTools\n *\n *  Collection of FS related tools, that stdlib lack of.\n **/\n\n\n'use strict';\n\n\n// stdlib\nvar fs              = require('fs');\nvar crypto          = require('crypto');\nvar os              = require('os');\n\nvar _pth            = require('path');\n\n// Node < 0.8 shims\nfs.exists = fs.exists || require('path').exists;\nfs.existsSync = fs.existsSync || require('path').existsSync;\n_pth.sep = _pth.sep || (_pth.resolve('.')[0] === '/' ? '/' : '\\\\');\n\n\nvar path_join       = _pth.join;\nvar path_normalize  = _pth.normalize;\nvar dirname         = _pth.dirname;\n\n\n// 3rd-party\nvar async = require('async');\nvar _     = require('lodash');\n\n\n// shortcuts\nvar path_join       = _pth.join;\nvar path_normalize  = _pth.normalize;\nvar dirname         = _pth.dirname;\n\n\n// epxorts: walk, mkdir, copy, remove\nvar fstools = module.exports = {};\n\n\n// INTERNAL HELPERS\n////////////////////////////////////////////////////////////////////////////////\n\n\n//  walk_flat(path, iterator, callback) -> void\n//  - path (String): Path to iterate through\n//  - iterator (Function): Will be fired on each element within `path`\n//  - callback (Function): Will be fired once all files were processed\n//\n//  Walks through given `path` and calls `iterator(path, callback)` for\n//  each found entry (regardless to it's type) and waits for all `callback`s\n//  (passed to iterator) to be fired. After all callbacks were fired, fires\n//  `callback` (given to walk_flat itself).\n//\n//  NOTICE: It walks through single dimension of file system - it won't go into\n//          found sub-directories. See `walk_deep` for this puprpose.\n//\n//  Example:\n//\n//    walk_flat('/home/nodeca', function (path, callback) {\n//      if ('/home/nodeca/secrets.yml' === path) {\n//        callback(Error(\"There is secrets file.\"));\n//        return;\n//      }\n//\n//      if ('/home/nodeca/xxx' === path) {\n//        callback(Error(\"Path contains some porno?\"));\n//        return;\n//      }\n//\n//      callback();\n//    }, function (err) {\n//      if (err) console.error(err);\n//      console.log('Done');\n//    });\n//\nfunction walk_flat(path, iterator, callback) {\n  fs.readdir(path, function (err, files) {\n    if (err) {\n      if (err && 'ENOENT' === err.code) {\n        callback(null);\n        return;\n      }\n\n      callback(err);\n      return;\n    }\n\n    async.forEach(files, function (file, next) {\n      iterator(path_join(path, file), next);\n    }, callback);\n  });\n}\n\n\n//  walk_deep(path, match, iterator, callback) -> void\n//  - path (String): Path to iterate through\n//  - match (Function): Path test whenever iterator should be executed or not\n//  - iterator (Function): Will be fired on each element within `path`\n//  - callback (Function): Will be fired once all files were processed\n//\n//  Walks through given `path` with all it's nested childs calling\n//  `iterator(path, callback)` for each found file.\n//\nfunction walk_deep(path, match, iterator, callback) {\n  walk_flat(path_normalize(path), function (path, next) {\n    fs.lstat(path, function (err, stats) {\n      if (err) {\n        next(err);\n        return;\n      }\n\n      if (stats.isDirectory()) {\n        walk_deep(path, match, iterator, next);\n        return;\n      }\n\n      if (match(path)) {\n        iterator(path, stats, next);\n        return;\n      }\n\n      next();\n    });\n  }, callback);\n}\n\n\nfunction copy_file(src, dst, callback) {\n  var ifd, ofd\n    , done = _.once(callback);\n\n  // create streams\n  ifd = fs.createReadStream(src, { bufferSize: 64 * 1024 }).on('error', done);\n  ofd = fs.createWriteStream(dst).on('error', done).on('close', done);\n\n  // pipe src to dst\n  ifd.pipe(ofd);\n}\n\n\n// PUBLIC API\n////////////////////////////////////////////////////////////////////////////////\n\n\n/**\n *  FsTools.walk(path, pattern, iterator, callback) -> void\n *  FsTools.walk(path, iterator, callback) -> void\n *\n *  Walks throught all files withing `path` (including sub-dirs) and calls\n *  `iterator` on each found file (or block device etc.) matching `pattern`.\n *  If no `pattern` was given - will fire call `iterator` for every single\n *  path found. After all iterations will call `callback` (if it was specified)\n *  with passing `error` as first arguemtn if there was an error.\n *\n *  If `path` points a file, iterator will be called against it (respecting\n *  pattern if it was given).\n *\n *\n *  ##### Iterator\n *\n *  All iterations are running within promise. So `callback` given to the `walk`\n *  will fire only after all `iterator` callbacks willnotify they finished their\n *  work:\n *\n *      var iterator = function (path, stats, callback) {\n *        // ... do something\n *        if (err) {\n *          // ... if error occured we can \"stop\" walker\n *          callback(err);\n *          return;\n *        }\n *        // ... if everything is good and finished notify walker we're done\n *        callback();\n *      };\n *\n *  Iterator is called with following arguments:\n *\n *  - `path` (String): Full path of the found element (e.g. `/foo/bar.txt`)\n *  - `stats` (fs.Stats): Stats object of found path\n *  - `callback` (Function): Callback function to call after path processing\n *\n *\n *  ##### Example\n *\n *      fstools.walk('/home/nodeca', function (path, stats, callback) {\n *        if (stats.isBlockDevice()) {\n *          callback(Error(\"WTF? Block devices are not expetcted in my room\"));\n *          return;\n *        }\n *\n *        if (stats.isSocket()) {\n *          console.log(\"Finally I found my socket\");\n *        }\n *\n *        callback();\n *      }, function (err) {\n *        if (err) {\n *          // shit happens!\n *          console.error(err);\n *          process.exit(1);\n *        }\n *\n *        console.log(\"Hooray! We're done!\");\n *      });\n *\n *\n *  ##### Example (using pattern matching)\n *\n *      fstools.walk('/home/nodeca', '\\.yml$', function (path, stats, callback) {\n *        fs.readFile(path, 'utf-8', funtion (err, str) {\n *          if (err) {\n *            callback(err);\n *            return;\n *          }\n *\n *          console.log(str);\n *          callback();\n *        });\n *      }, function (err) {\n *        if (err) {\n *          console.error(err);\n *        }\n *\n *        console.log('Done!');\n *      });\n **/\nfstools.walk = function (path, pattern, iterator, callback) {\n  var match;\n\n  if (!callback) {\n    pattern  = null;\n    iterator = arguments[1];\n    callback = arguments[2];\n  }\n\n  if (!pattern) {\n    match = function () { return true; };\n  } else if (_.isFunction(pattern) && !_.isRegExp(pattern)) {\n    match = pattern;\n  } else {\n    pattern = new RegExp(pattern);\n    match = function (path) { return pattern.test(path); };\n  }\n\n  path = path_normalize(path);\n  fs.lstat(path, function (err, stats) {\n    if (err) {\n      callback('ENOENT' === err.code ? null : err);\n      return;\n    }\n\n    if (stats.isDirectory()) {\n      walk_deep(path, match, iterator, callback);\n      return;\n    }\n\n    if (match(path)) {\n      iterator(path, stats, callback);\n      return;\n    }\n\n    callback();\n  });\n};\n\n\n\n/**\n *  FsTools.walkSync(path, pattern, iterator) -> void\n *  FsTools.walkSync(path, iterator) -> void\n *\n *  Synchronous version of [[FsTools.walk]].\n **/\nfstools.walkSync = function (path, pattern, iterator) {\n  var match, stat;\n\n  if (!iterator) {\n    pattern  = null;\n    iterator = arguments[1];\n  }\n\n  if (!pattern) {\n    match = function () { return true; };\n  } else if (_.isFunction(pattern) && !_.isRegExp(pattern)) {\n    match = pattern;\n  } else {\n    pattern = new RegExp(pattern);\n    match = function (path) { return pattern.test(path); };\n  }\n\n  path = path_normalize(path);\n\n  try {\n    stat = fs.lstatSync(path);\n  } catch (err) {\n    if ('ENOENT' === err.code) {\n      return;\n    }\n\n    // rethrow\n    throw err;\n  }\n\n  if (stat.isDirectory()) {\n    fs.readdirSync(path).forEach(function (file) {\n      fstools.walkSync(path_join(path, file), match, iterator);\n    });\n    return;\n  }\n\n  if (match(path)) {\n    iterator(path, stat);\n    return;\n  }\n};\n\n\n/**\n *  FsTools.remove(path, callback) -> void\n *  - path (String): Path to remove\n *  - callback (Function): Fired after path was removed\n *\n *  Removes given `path`. If it was a directory will remove it recursively,\n *  similar to UNIX' `rm -rf <path>`. After all will fire `callback(err)` with\n *  an error if there were any.\n *\n *  If given `path` was file - will proxy call to `fs.unlink`.\n *\n *\n *  ##### Example\n *\n *      fstools.remove('/home/nodeca/trash', function (err) {\n *        if (err) {\n *          console.log(\"U can't touch that\");\n *          console.err(err);\n *          process.exit(1);\n *        } else {\n *          console.log(\"It's Hammer time\");\n *          process.exit(0);\n *        }\n *      });\n **/\nfstools.remove = function (path, callback) {\n  path = path_normalize(path);\n  fs.lstat(path, function (err, stats) {\n    if (err) {\n      // file/dir not exists - no need to do anything\n      if ('ENOENT' === err.code) {\n        callback(null);\n        return;\n      }\n\n      // unknown error - can't continue\n      callback(err);\n      return;\n    }\n\n    if (!stats.isDirectory()) {\n      fs.unlink(path, callback);\n      return;\n    }\n\n    async.series([\n      async.apply(walk_flat, path, fstools.remove),\n      async.apply(fs.rmdir, path)\n    ], function (err/*, results */) {\n      callback(err);\n    });\n  });\n};\n\n\n\n/**\n *  FsTools.removeSync(path) -> void\n *  - path (String): Path to remove\n *\n *  Removes given `path`. If it was a directory will remove it recursively,\n *  similar to UNIX' `rm -rf <path>`.\n *\n *  If given `path` was file - will proxy call to `fs.unlinkSync`.\n *\n *\n *  ##### Example\n *\n *      try {\n *        fstools.remove('/home/nodeca/trash');\n *        console.log(\"It's Hammer time\");\n *        process.exit(0);\n *      } catch (err) {\n *        console.log(\"U can't touch that\");\n *        console.err(err);\n *        process.exit(1);\n *      }\n **/\nfstools.removeSync = function removeSync(path) {\n  var nested_err, lstat;\n\n  path  = path_normalize(path);\n  lstat = fs.lstatSync(path);\n\n  if (!lstat.isDirectory()) {\n    fs.unlinkSync(path);\n    return;\n  }\n\n  fs.readdirSync(path).forEach(function (file) {\n    try {\n      fstools.removeSync(path_join(path, file));\n    } catch (err) {\n      nested_err = err;\n    }\n  });\n\n  if (!nested_err) {\n    fs.rmdirSync(path);\n    return;\n  }\n\n  throw nested_err;\n};\n\n\n/**\n *  FsTools.mkdir(path, mode, callback) -> void\n *  FsTools.mkdir(path, callback) -> void\n *  - path (String): Path to create\n *  - mode (String|Number): Permission mode of new directory. See stdlib\n *    fs.mkdir for details. Default: '0755'.\n *  - callback (Function): Fired after path was created\n *\n *  Creates given path, creating parents recursively if needed.\n *  Similar to UNIX' `mkdir -pf <path>`. After all will fire `callback(err)` with\n *  an error if there were any.\n *\n *\n *  ##### Example\n *\n *      fstools.mkdir('/home/nodeca/media/xxx', function (err) {\n *        if (err) {\n *          console.log(\"Can't' create directory\");\n *          console.err(err);\n *          process.exit(1);\n *        } else {\n *          console.log(\"We can now store some romantic movies here\");\n *          process.exit(0);\n *        }\n *      });\n **/\nfstools.mkdir = function (path, mode, callback) {\n  if (undefined === callback && _.isFunction(mode)) {\n    callback = mode;\n    mode = '0755';\n  }\n\n  path = path_normalize(path);\n  fs.exists(path, function (exists) {\n    var parent;\n\n    if (exists) {\n      callback(null);\n      return;\n    }\n\n    parent = dirname(path);\n    fstools.mkdir(parent, mode, function (err) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      fs.mkdir(path, mode, function (err) {\n        // EEXIST is not error in our case\n        // but a race condition :((\n        if (err && 'EEXIST' === err.code) {\n          callback(null);\n          return;\n        }\n\n        // fallback to default behavior\n        callback(err);\n      });\n    });\n  });\n};\n\n\n/**\n *  FsTools.mkdirSync(path[, mode = '0755']) -> void\n *\n *  Sync version of [[FsTools.mkdir]].\n **/\nfstools.mkdirSync = function (path, mode) {\n  mode = mode || '0755';\n  path = path_normalize(path);\n\n  if (fs.existsSync(path)) {\n    return;\n  }\n\n  fstools.mkdirSync(dirname(path), mode);\n\n  try {\n    fs.mkdirSync(path, mode);\n  } catch (err) {\n    if ('EEXIST' !== err.code) {\n      throw err;\n    }\n  }\n};\n\n\n/**\n *  FsTools.copy(src, dst, callback) -> void\n *  - src (String): Source file\n *  - dst (String): Destination file\n *  - callback (Function): Fired after path has been copied\n *\n *  Copies `src` to `dst`, creates directory for given `dst` with\n *  [[FsTools.mkdir]] if needed. Fires `callback(err)` upon\n *  completion.\n *\n *\n *  ##### Example\n *\n *      var src = '/home/nodeca/secrets.yml',\n *          dst = '/home/nodeca/very/deep/secrets/main.yml';\n *\n *      fstools.copy(src, dst, function (err) {\n *        if (err) {\n *          console.log(\"Failed copy \" + src + \" into \" + dst);\n *          console.err(err);\n *          process.exit(1);\n *        } else {\n *          console.log(\"Done!\");\n *          process.exit(0);\n *        }\n *      });\n **/\nfstools.copy = function (src, dst, callback) {\n  src = path_normalize(src);\n  dst = path_normalize(dst);\n\n  // sad but true - people make mistakes...\n  if (src === dst) {\n    callback(null);\n    return;\n  }\n\n  fs.lstat(src, function (err, stats) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    fstools.mkdir(dirname(dst), function (err) {\n      var chmod, done;\n\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      // chmod dst\n      chmod = async.apply(fs.chmod, dst, stats.mode.toString(8).slice(-4));\n\n      // reject async.series' results\n      done = function (err/*, results */) { callback(err); };\n\n      // *** file\n      if (stats.isFile()) {\n        async.series([async.apply(copy_file, src, dst), chmod], done);\n        return;\n      }\n\n      // *** symbolic link\n      if (stats.isSymbolicLink()) {\n        async.waterfall([\n          function (next) {\n            fs.exists(dst, function (exists) {\n              if (exists) {\n                fstools.remove(dst, next);\n                return;\n              }\n\n              next();\n            });\n          },\n          async.apply(fs.readlink, src),\n          function (linkpath, next) {\n            fs.symlink(linkpath, dst, next);\n          },\n          chmod\n        ], done);\n        return;\n      }\n\n      // *** directory\n      if (stats.isDirectory()) {\n        async.series([\n          function (next) {\n            fs.mkdir(dst, '0755', function (err) {\n              if (err && 'EEXIST' === err.code) {\n                next(null);\n                return;\n              }\n\n              next(err);\n            });\n          },\n          async.apply(walk_flat, src, function (path, next) {\n            fstools.copy(path, dst + path.replace(src, ''), next);\n          }),\n          chmod\n        ], done);\n        return;\n      }\n\n      // *** unsupported src\n      callback(new Error('Unsupported type of the source'));\n    });\n  });\n};\n\n\n/**\n *  FsTools.move(source, destination, callback) -> Void\n *  - source (String): Source filename\n *  - destination (String): Destination filename\n *\n *  Moves file from `source` to `destination`.\n **/\nfstools.move = function move(source, destination, callback) {\n  fs.rename(source, destination, function (err) {\n    if (!err) {\n      callback();\n      return;\n    }\n\n    // TODO: Needs testing coverage\n\n    // normally err.code can be:\n    // - EXDEV (different partitions/devices)\n    // - ENOTEMPTY (source and destination are not-empty dirs)\n    // - EISDIR (destionation is dir, source is file)\n\n    async.series([\n      async.apply(fstools.copy, source, destination),\n      async.apply(fstools.remove, source)\n    ], function (err/*, results*/) {\n      callback(err);\n    });\n  });\n};\n\n\n/**\n *  FsTools.tmpdir([template = '/tmp/fstools.XXXXXX']) -> String\n *  - template (String): Temporary directory pattern.\n *\n *  Returns non-existing (at the moment of request) temporary directory path.\n *  `template` must contain a substring with at least 3 consecutive `X`, that\n *  will be replaced with pseudo-random string of the same length.\n *\n *\n *  ##### Example\n *\n *      fstools.tmpdir('/tmp/fooXXX');      // -> '/tmp/fooa2f'\n *      fstools.tmpdir('/tmp/fooXXX');      // -> '/tmp/foocb1'\n *      fstools.tmpdir('/tmp/foo-XXXXXX');  // -> '/tmp/foo-ad25e0'\n **/\nfstools.tmpdir = function tmpdir(template) {\n\n  // Default location - in system tmp dir\n  var tmp_default = path_join(\n    // Just fallback to '/tmp' for node v0.6. Dirty, but better than nothing :)\n    os.tmpDir ? os.tmpDir() : '/tmp',\n    'fstools.XXXXXX'\n  );\n\n  var match = (template || tmp_default).match(/^(.*?)(X{3,})(.*?)$/),\n      attempts, length, random, pathname;\n\n  if (!match) {\n    throw new Error('Invalid tmpdir template: ' + template);\n  }\n\n  attempts = 5;\n  length   = match[2].length;\n\n  // Do not try more than attempts of times\n  while (attempts--) {\n    random   = crypto.randomBytes(Math.ceil(length / 2)).toString('hex').substring(0, length);\n    pathname = (match[1] || '') + random + (match[3] || '');\n\n    if (!fs.existsSync(pathname)) {\n      // Generated pathname is uniq - return it\n      return pathname;\n    }\n  }\n\n  throw new Error('Failed to generate uniq tmpdir with template: ' + template);\n};\n\n\n/**\n *  FsTools.findSorted(pathname, pattern, callback(err, files)) -> Void\n *  FsTools.findSorted(pathname, callback(err, files)) -> Void\n *\n *  Finds all files matching `pattern` withing `pathname` (including sub-dirs),\n *  and passes list of found files (sorted alphabethically) to the `callback`.\n *  If no `pattern` was given - will collect all found files.\n **/\nfstools.findSorted = function findSorted(pathname, pattern, callback) {\n  var files = [];\n\n  if (!callback) {\n    callback = pattern;\n    pattern  = null;\n  }\n\n  fstools.walk(pathname, pattern, function (file, stats, next) {\n    files.push(file);\n    next();\n  }, function (err) {\n    callback(err, files.sort());\n  });\n};\n"}